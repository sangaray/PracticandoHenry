M4FE-L2 Daiana Grillia
Type Annotations
Nos permite tipar una variable, con lo cual no podemos cambiar ni a propósito, ni por error el tipo de dato que va a guardar esa variable
let variableName: type = valor;
ejemplo
let a: number = 2;
// a = "3" no se puede asignar un tipo distinto de dato al que se uso al declarar la variable


Funciones
En una función debemos indicar tipo de dato de los parámetros si los tiene y el tipo de dato que devuelve
function name(a: type, b: type): type (retorno) {}
ejemplo
const addition = (a: number, b: number): number => a + b;

Interfaces
Los nombres de estar en CamelCase y primera letra siempre en mayúscula
Ejemplo
Interface nombre {
    propiedad: type;
    propiedad2: type;
    propiedad3: type;
}
Ejemplo
export interface product {
  title: string;
  description: string;
  price: number;
  images: Array<string>;
  active: boolean;
}
property?: type; el signo ? indica que la propiedad es opcional, no es obligatorio utilizarla
Uso export porque así ts entiende que si bien la interface no está siendo usada en este archivo lo está en algún otro lugar

Declaración de Arrays
1. nombre: Array<tipo>
2. nombre: tipo[]

OBJETOS
Cuando declaramos un objeto este debe seguir a la estructura de la interface.

CLASES
El tipado no va solo en el parámetro del constructor también debe ir en la propiedad específica de la clase 
Hay tres formas de hacerlo
Public: podemos acceder al valor desde cualquier lugar del código
Private: podeos acceder a esa propiedad sólo dentro de la clase
Protected: concede acceso desde la clase y las subclases de esa clase

GENÉRICOS
Se crea un funcion genérica, recibe un array de algo y devuelve un array de algo
Ejemplo
const getLastItem = <T>(items: T[]): T => {
  return items[items.length - 1];
}
T: es un tipo genérico

PROYECTO DE EJEMPLO
vite
1. Creamos el proyecto 
npm create vite@latest
2. nos desplazamos a la carpeta del proyecto
cd nombreDelProyecto (demo2)
3. Instalamos las dependencias
npm install

React
4. Creamos un componente
ReactFC.tsx
5. Se debe evitar usar any como tipo de dato, es una mala práctica en typescript
6. No es suficiente la extensión tsx para indicar que es un componente, se necesita especificarlo
import React from 'react'
- export const FirstCompnent: React<React.FunctionComponent> = () => {
}
- export const FirstCompnent: React.FC = () => {
}
7. Otra cosa que podemos hacer pero no es extremadamente necesaria es tipar el retorno de la función
- export const FirstCompnent: React.FC<Props> = (): React.ReactElement => {
}
Al tipar de esta manera no puedo retornar nada que no sea un elemento de HTML en esa función
8. Otra forma de tipar el componente es usando React.ReactNode, la diferencia con el anterior es que  puedo retornar otro tipo de dato que no sea sólo un elemento de HTML
9. Props, necesitamos tiparlas. Las props son un objeto,
- puedo hacer destructuring y poner la propiedad, pero debo espcificar que son props y de qué tipo son
- Si recibo una o dos props puedo usar un genérico

Este tipo de tipado solo se puede usar si tenemos una o dos props, con más ya es muy grande y no se puede usar
const Saludador: React.FC<{
  children: React.ReactElement;
  name: string;
}> = ({ name, children }): React.ReactElement => {}

INTERFACES 
Para casos en el que tengamos más de dos props vamos a usar interfaces para determinar qué props para a recibir el componente y qué tipo de props van a ser

M4FE-L2 Maxi Gadea
TYPESCRIPT Y REACT 
Repaso de Typescript
Type Annotations
Es una forma de decir de qué tipo son las variables
Tipo any, no es conveniente usarlo, que sirve para decir que puede ser cualquier cosa, solo se usa en casos muy especiales

INTERFACES
Es un conjunto de tipos 

¿Recuerdas que...?
Existen dos formas de declarar un arreglo de tipo X en tsPuedes utilizar la notación de generics con " Array<X> o la sintaxis de arrays convencionales con "X[]".
Ejemplo
// Usando la notacion de generics
const arregloGenerico: Array<number> = [1, 2, 3];

// Usando la sintaxis de arrays convencional
const arregloConvencional: number[] = [4, 5, 6];

console.log(arregloGenerico);      // Output: [1, 2, 3]
console.log(arregloConvencional);  // Output: [4, 5, 6]

CLASES
Podemos tipar variables públicas, privadas y protegidas

GENÉRICOS
Sirve para tener un dato genérico que podemos pasar a una función
Debemos hacer un método por cada tipo de dato.

RELEVANCIA DE TYPESCRIPT DENTRO DE REACT
Typescript => Mantenibilidad
           => Rich IDE
           => Soporte ES6
           => Plataforma cross
           => Lenguaje orientado a OBJETOS
           => Manipulación DOM

02 TYPESCRIPT Y REACT
Configuración de un proyecto
- Selecciona TypeScript + SWC como opción.
SWC: Compilador rápido que mejora los tiempos de compilación, optimizando el rendimiento de los proyectos web.

Instalación
npm create vite@latest







1:35:12 Clase React & Typescript
