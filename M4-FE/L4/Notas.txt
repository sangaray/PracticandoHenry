M4FE-L4 - Daiana Grillia
Routing Nextjs
Rutas dinámicas

Rutas anidadas
Next recomienda que a la ruta que va a recibir el parametro se la llame [slug], 
cuando se trata de un id usamos [id]
Esta carpeta se coloca dentro de la que vamos a anidar

Si estoy en app: localhost:3000
si estoy en profile: localhost:3000/profile
dentro tengo una ruta dinámica que depende de profile
localhost:3000/profile/[slug] (cualquier cosa o ruta interna)

Rutas dinámicas
Parámetros de Rutas y Cadenas de Búsqueda

M4FE-L4 - Maxi
Routing
Page Router
Forma standard de gestionar rutas. Cada archivo en el directorio page corresponde auna ruta. Enforque es simple y directo.

App RouterEnforque más personalizable. Se puede utilizar un componente de enrutamiento personalizado para manejar las rutas en toda la aplicación. Permite una mayor flexibilidad en el manejo de rutas, como la agrupación de rutas, rutas anidadas y rutas protegidas, entre otras cosas.

Ventajas de App Router
Flexibilidad
Tienes más control sobre cómo se gestionan las rutas en tu aplicación.
Puedes implementar lógica personalizada para diferentes situaciones de enrutamiento.

Rutas Anidadas
Es más fácil manejar rutas anidadas y jerárquicas con un enrutador personalizado.

Middleware
Puedes implementar middleware para pre procesar las solicitudes de enrutamiento, como la autenticación de usuario, antes de que se carguen los componentes.

Ventajas de Page Router
Simplicidad
Para aplicaciones más pequeñas o menos complejas.
El enfoque estándar de Next.js con el "page router" puede ser más fácil de entender y mantener.

Convención sobre Configuración
Sigue el principio de "convención sobre configuración".
Significa que hay menos configuración necesaria para comenzar a trabajar con las rutas.

Menos dependencias externas
Es menos probable que necesites dependencias externas, lo que puede simplificar tu proyecto.

Implementación de App Router
Recuerda que para crear un nuevo repositorio debemos abrir la terminal donde quieres que se cree la carpeta.
npx create-next-app@latest

¿Cuáles son las configuraciones que debemos plantear para crear este proyecto?

PS C:\Users\NoMorePls2.0\Desktop\Creación M4 Front\Routing Next> (npx create-next-app@latest)

Ok to proceed? (y) y
√ What is your project named? ... (routing-next)
√ Would you like to use TypeScript? ... No / (Yes)
√ Would you like to use ESLint? ... No / (Yes)
√ Would you like to use Tailwind CSS? ... (No) / Yes
√ Would you like to use `src/` directory? ... No / (Yes)
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to customize the default import alias (@/*)? ... (No) / Yes

Las que están entre paréntesis son las respuestas que debemos dar para crear el proyecto.

Ruta Estática
- Genera una carpeta nueva dentro del directorio "app".
- Crea un archivo denominado "page.js".
- Este archivo determinará el contenido que se mostrará al acceder a dicha ruta.
- Siguiendo las buenas prácticas, desarrolla un componente en un archivo .jsx para gestionar el contenido.

Estructura de Archivos
ROUTING NEXT
├── .next
├── node_modules
├── public
└── src
    ├── app
    │   ├── estatica
    │   │   ├── Estatica.jsx
    │   │   └── page.js
    │   ├── favicon.ico
    │   ├── globals.css
    │   ├── layout.js
    │   ├── page.js
    │   └── page.module.css
    └── components

Estatica.jsx
const Estatica = () => {
  return <div>Estamos en nuestra ruta http://localhost:3000/estatica</div>;
};

export default Estatica;

page.js
export { default } from "./Estatica";

Hay quienes usan este sistema, donde tenemos una carpeta con el nombre de la ruta y el page sólo exporte esa ruta, pero nosotros vamos a estar trabajando con page como enrutador principal.