
M3-L10 - REACT FORMS
Daina Grilla
FORMULARIOS CONTROLADOS
Para poder crear formularios controlados tenemso que usar estados.
Debemos enlazar (bindear) de alguna manera el estado de React con el estado del input, porque ambos tienen que ser exactamente iguales, si hay diferencias nos va a traer problemas.
Las validaciones de formularios de HTML sólo sirven como mensajitos recordatorios, no son reales, no son validaciones reales. Para que realmente funciones tienen que tener validaciones con javascript, validaciones con estados
Para el binding tenemos que igualar el estado de react con el value del formulario, además tengo que tener darle un name al input para luego poder identificar cual de los inputs esta llenando el usuario

HANDLERS
Se utilizan para manejar los estados.
En los inputs si no hay asignado un handlerOnChange junto con el value={props} no se podrá escribir en el mismo. Debo usar onChange porque los inputs notienen un evento onClick.
onChange: hace que cada caracter que se escribe sea almacenado en el estado de react
Cuando enlazo las cosas de esta manera, recibo automáticamente un objecto, llamado event o evento y este objeto se dispara cada vez que haya un cambio en el input
Usar onChange((event) => hanlerInputOnChange(event)); es igual a usar onChange={handleInputChange}
En el primer caso se pasa de manera literal la prop, si no indico que paso un callback para automáticamente la funcion.
targer, value y name son las dos propiedades importantes dentro de target
Asignar el valor del input al estado
- Forma 1
      if (name === "username") {
      setUserData({
        ...userData,
        username: value,
      });
    }
    if (name === "password") {
      setUserData({
        ...userData,
        password: value,
      });
    }
- Forma 2
  setUserData({
      ...userData,
      [name]: value,
    });

Cuando hago click en el botón submit, se recarga la página y se vacían los inputs. Para evitar esto, debo usar preventDefault()
Este botón junta la información del estado y lo envía al backend.

VALIDACIÓN DE FORMULARIOS
Capeta helper es la misma que utils

Se puede aplicar la validación al hacer click al en el botón submit o cada vez que se modifica el estado
La forma correcta de aplicar validaciones es hacerlo a medida que el usuario va escribiendo en el input, a medida que va cambiando el usuario
errors: viene del errors en el handlerOnChange
input: viene del input en el handlerOnChange, del estado que se modifica con el input del form

Para manejar los errores de forma correcta vamos a crear un estado para ello

ARIEL ROMERO
FORMULARIOS CONTROLADOS
Formularios controlados: son los que se manejan con el estado
Formularios no controlados: son los que no se manejan con el estado
Formularios controlados: se manejan con el estado, se manejan con el onChange

FORMULARIOS DE REACT
Formularios No controlados
En los formularios no controlados  (formularios de HTML o javascript solo) no hay validaciones en tiempo real, el contenido de los inputs recién se validan cuando se presiona el botón submit. Además cada vez que hago click en el botón se reinicia o recarga nuevamente la página completa borrando el contenido de los inputs
Fromularios controlados
Los inputs están directamente vinculados al estado del componente y son controlados por este. La información recibida a través del formulario se maneja desde un solo lugar. Permiten centralizar la información, realizar validaciones y manejar eventos de forma precisa. Todo esto se realiza en tiempo real.

PROPIEDAD DINÁMICA DE UN OBJETO
Ejemplo
const nombrePropiedad = "apellido";
const valorPropiedad = "Simpson";

const usuario = {
  nombre: "Homero",
  // PROPIEDADES DINÁMICA
  [nombrePropiedad]: valorPropiedad,
};

console.log(usuario);

EVENTO SUBMIT
La información recolectada en el formulario es enviada al backend o a un servidor que procesará los datos
Por default recarga la página una vez que se envían los datos
Para evitar esta acción agregamos el método preventDefault() al objeto submit

VALIDACIÓN DE DATOS
- Garantiza que los datos almacenados sean precisos y consistentes
- Evita errores en el funcionamiento del sistema
- Son una capa adicional de seguridad
- Evita que datos incorrectos o no validos lleguen a los sistemas backend ahorrando recursos y evitando procesamientos innecesarios


1:05:00 clase 10


