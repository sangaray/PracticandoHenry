M3-L9 - CICLOS DE VIDA DE COMPONENTES FUNCIONALES DE REACT
Tenemos una función contructora, que nos retorna una estructura HTML, cuando esta función se ejecuta se hace un render, el componente se monta al DOM, y esto se ve en el navegador.
El componente puede tener estados internos, que al actualizarse se volvía a renderizar y se muestra con el nuevo contenido
El componente en algún momento de la ejecución ya no tiene que mostrarse más este se desmonta del DOM y ya no se muestra más
El ciclo de vida es este:
1. Se ejecuta y Crea.
2. Se modifica.
3. Se destruye o deja de visualizar

COMPONENTES DE clases
Si bien ya se deprecaron y no se usan, hay proyectos creados de esta forma que no van a cambiar. Por lo que es bueno conocerlos por si necesitan trabajar con uno de estos proyectos.

DIFERENCIAS CON LOS COMPONENTES DE función
1. Es necesario importar REACT
2. Es necesario ejecutar el método Render

Para declarar estados tengo que crearlos dentro de un constructo, y necesito llamar a super

Super: trae todos los métodos de donde se extiende la clase. Dentro del constructor vamos a llamar al estado
this.state: state es una palabra reservada de las clases. Esto se crea una sola vez como un objeto que contiene todos mis estados
this.setState: es un método que me permite actualizar el estado. Es un método que recibe un objeto con las propiedades que quiero actualizar

Puedo combinar funciones con componentes de clases.

Originalmente en los componentes funcionales no se podría trabajar con estados, pero desde que se crearon los hooks todo lo que hacíamos con clases se puede hacer con las funciones, y esta es la razón por la que se deprecaron los componentes de clases

CICLO DE VIDA
1. MONTAJE (componentDidMount): el componente se crea, se sube al DOM, se monta sólo una vez. Permite ejecutar algo una vez que el componente se terminó de montar
  - Se ejecuta el contructora
  - Se ejecutan los estados
  - Se trae las props
  - Se renderiza, se monta al DOM virtual y luego al real
  - Se actualizan las referencias al DOM
  - Pregunta hay algo que querés que haga?

ORDEN DE LOS MÉTODOS QUE SE VAN EJECUTANDO
- constructor(): Inicializa el estado del componente.
getDerivedStateFromProps(): Se llama antes de cada renderizado cuando las props cambian.
- Render(): Crea la representación de la estructura del componente.
- ComponentDidMount(): Se ejecuta después de la inicialización del componente.

2. ACTUALIZACIÓN (componentDidUpdate): esta fase ocurre cuando un componente ya renderizado se actualiza debido a cambios en su estado interno o en las props que recibe. Esta fase consta de varios métodos: cada vez que el estado se actualiza también lo hace el componente.
- Se actualiza cuando cambian las props
- Cuando se actualiza el estado, en  setState
forceUpdate(): Actualiza el componente sin importar si las props o el estado han cambiado. No se recomienda en absoluto usar este método a menos que sea necesario.
- Se puede hacer que aunque haya un cambio de estado o prop no se actualice el componente shouldComponentUpdate, esto también está completamente desaconsejado, en lugar utilizar variables
- Se vuelven a actualizar todas las props getDerivedStateFromProps
- Luego hace un rerenderizado. Guardando el estado viejo con getSpanshotBeforeUpdate para tenerlo de refencia, actualizo las referencias al DOM 
- Y después ejecuto algo antes de terminar con componentDidUpdate

ORDEN DE LOS MÉTODOS QUE SE VAN EJECUTANDO
- getDerivedStateFromProps()
- shouldComponentUpdate() // no se recomienda
- render()
- getSnapshotBeforeUpdate()
- componentDidUpdate()

El método render se ejecuta dos veces una de verificación y otra cuando haga el renderizado

3. DESMONTAJE (componentWillUnmount):Última fase del ciclo de vida. Hace referencia al momento en que un componente es eliminado del DOM y no se visualiza más. Se llevan a cabo métodos que permiten la limpieza y liberación de recursos.
- componentWillUnmount() se ejecuta antes de que el componente se desmonte y detiene tareas que consumen recursos aún al desaparecer el componente. se ejecuta cuando el componente se desmonta o se destruye, cuando se sale o deja de estar en la pantalla Se ejecuta antes de irse, antes de cerrarse

FORMA DECLARATIVO Y NO IMPERATIVA
En el renderizado condicional sólo puedo usar operador ternario o el && para establecer la condición ya que un bloque if es una forma imperativa y react usa la forma declarativa solamente

No se puede traer toda la información junta por si el usuario va a querer ver algo

Cuando el componente se cierra, se cierra esa instancia del componente, si se vuelve a abrir se crea una nueva instancia

strict mode: react quiere saber si se va a seguir usando el contador después de que se cierra, para esta verificación se monta de prueba y después lo monta de nuevo

CASOS DE USO
Montaje
- Solicitud de datos desde una API o base de datos.
- Realizar suscripciones a eventos del navegador.
- Inicializar recursos externos.

Actualización
- Realizar acciones cada vez que una prop específica cambie.
- Actualizar el título de la página cada vez que el estado del componente se modifique.
- Gestionar acciones cada vez que una sección específica del estado cambia.

Desmontaje
- Limpiar suscripciones a eventos del navegador.
- Limpiar el almacenamiento local del navegador.
- Cancelar peticiones de red o APIs.

DEMO FUNCTION VS CLASS
const [counter, setCounter] = useState(0);
Reemplaza en la clase a:
 constructor(props) {
    super(props); // trae los métodos de la calse "Component"
    this.state = {
      contador: 0,
    };
  }

const sumaUno = () => {
    setContador(contador + 1);
}
Reemplaza en la clase a:
  sumarUno = () => {
    this.setState({
      contador: this.state.contador + 1,
    });
  };

HOOK USEEFFECT
useEffect(){callback}, [array de dependencias]); // el array vacío es el equivalente a componentDidMount. Se coloca en el padre, en nuestro ejemplo en FunctionDisplay, dentro del componente. Si nose pone el array de dependencias se repiten las peticiones indefinidamente

useEffect(() => {
      console.log("FunctionCounter se actualizó");
    }, [contador]); // se actualiza cuando cambia el contador, el contenido dentro del array de dependencias es el equivalente a componentDidUpdate
  Sólo se actualiza cuando se actualiza el estado indicado, puedo indicar especificamente cuales estados tiene que mirar, cosa que no sucede con las clases, ya que la actualización se hace cuando cambia cualquiera de los estados o prop. Se coloca en el padre, en nuestro ejemplo en FunctionCounter, dentro del componente

useEffect(
  () => () => {
    console.log("Display se desmontará del DOM");
  },
  []
); // se ejecuta cuando se desmonta el componente, es el equivalente a componentWillUnmount. Se coloca en el hijo, en nuestro ejemplo en Display, dentro del componente

RESUMEN
/* componentDidMount:
/* useEffect(() => {}, []);

/* componentDidUpdate:
/* useEffect(() => {}, [estado/s_o_prop/s_a_seguir]);

/* componentWillUnmount:
/* useEffect(() => () => {}, []);

EJPRACTICO
1. Inicializa el estado inicial como un array vacío dentro de useState()
2. Elimina las funciones y agregar y modificar así como los botones que las ejecutan
3. En el componente Tarjeta agrega un botón con la leyenda "Ver detalle" y mostrar el nombre y casa del personaje
4. Utiliza la API seleccionada: 
https://hp-api.onrender.com/
Agrega la solicitud fetch o axios
5. Utiliza la información recibida para modificar el estado con la función seteadora
6. Usa el método slice para trabajar con sólo los primeros cinco perdsonajes

API es un servidor que nos devuelve un JSON

Si quiero pasar un argumento a una función en un botón, debo enviarla como arrow function
onClick={() => clickHandler(id)}
en lugar de pasarla sóla
clickHandler(id)
