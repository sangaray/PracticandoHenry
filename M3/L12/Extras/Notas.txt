M3-L12 - React Context (Daiana)
Hooks
- createContext
- contextProvider
- useContext

CREATCONTEXT
Se puede necesitar tener varios archivos de contexto.
El archivo también va a llevar la extensión jsx, porque también vamos a trabajar elementos de React
Con este hook podemos guardar nuestro contexot en una variable y la vamos a poder exportar
Por defecto se crea con un valor nulo, pero puede recibir cualquier tipo de valor, aunque más comunmente los construimos como objetos, para tener múltiples propiedades que guarden la información de la aplicación
const {createContext} from React

export const TodoContext = createContext([{
  todos: [],
}])

CONTEXTPROVIDER
Va a representar a un componente. Un componente que vammos a utilizar para distribuir el contenido del contexto.
La estructura básica de un contextProvider es un componente funcional, que va a recibir como props a todos aquellos componentes que necesiten la información que tiene el contexto del provider.
Va a recibir como argumento a otros componentes llamados children y va a retornar todos esos componentes que se encuentren dentro del proveedor, envueltos por él.
Todos los componentes que se reciben por parametro se convierten automáticamente en una propiedade del proveedor

export const TodosProvider = ({ children }) => {
  return <>{children}</>;
};

USECONTEXT
Recibe como argumento el contexto que se quiere utilizar, del cual queremos extraer información. Tendremos como resultado la información que hay en el contexto.

const { todos } = useContext(TodoContext);

SECUENCIA TRABAJANDO CON REACT 
1. Crear el contexto
2. Crear el provider
3. En el provider crear el estado inicial
4. Crear las funciones que modifican el estado
5. En el provider retornar el contexto con el valor del estado y las funciones
6. En el componente que necesite el contexto, utilizar el hook useContext para acceder al contexto
7. Importar el provider en el componente que necesita el contexto y envolverlo con el provider
8. Importar el contexto en el componente que necesita el contexto y utilizar el hook useContext para acceder al contexto
8. Utilizar las funciones del contexto para modificar el estado

M3-L12 - REDUX (Ariel)
Flujo Estados Locales (React)
Un componente puede tener un estado interno, le podemos pasar por props el estado interno o el set del estado a los hijos, el hijo puede pasar el setState lo que desencadena un evento que modifica al componente dueño del estado, regresando al padre y sus descendientes
Flujo de datos unidireccional de datos hacia abajo y los eventos hacia arriba
No se puede enviar información a hermanos o hacia arriba

Estado Global (Redux)
Da un estado global que se puede acceder desde cualquier componentes y lo puedo manejar desde cualquier componente
No usa props, se trabaja con hooks, se guarda en el store.

Qué es Redux?
- Es una librería
- Maneja el estado global de una app de JS 
- Facilita la gestión del estado global
- Permite hacer escalable la aplicación
- Proporciona un almacén centralizado para el estado de la aplicación
-  Facilita el mannejo y sincronización de los datos entre las distintas partes que lo consumen
- Mejora el mantenimiento del flujo de información

3 PRINCIPIOS DE REDUX
Fuente ünica de Verdad
- Todo lo que necesitas saber sobre la aplicación se encuentra en un solo lugar (store)
- Facilita la gestión y comprensión del estado general

Estado Sólo Lectura
- Sólo puedes cambiar el estado emitiendo las llamadas actions
- Los estado son considerados inmutables

Los Cambios se Realizan Mediantes Funciones Puras
- Las transformaciones del estado son manejadas por funciones predecibles y sin efectos secundarios, conocidos como reducers

Flujo de Redux

No me importa donde estén estos componentes ni su relación

Reducer = el único que puede modificar la lista. Recibe el estado y la acción y devuelve el nuevo estado
Actións = es el medio de comunicación entre los componentes y el reducer. Es un objeto
Dispatch = es el medio de comunicación entre el reducer y los componentes

Se desencadena un evento en el componente Stock, que envía un Action al Reducer que crea el estado nuevo pisando al anterior y el reducer envía el nuevo listado al componente Carrito donde se actualiza el componente
Action
Type: qué quiero hacer
Payload: información adicional para realizar la tarea

READUX CORE
Actions: objeto que contiene información sobre el cambio solicitado por un componente de la aplicación
- Action Type: indica el tipo de acción a efectuar. Actúa como una clave que será utilizada por el reducer para determinar qué cambio realizar
- Action Payload: contiene la información necesaria enviada por el componente para modificar el esado, esta información es opcional dependiendo de la acción a realizar

Action Creators
Es una función constructora que retorna las actions

INSLACIÓN DE REDUX CORE (Puro)
npm install redux@4.0.5
Se instala esta versión porque las nuevas ya no permiten trabajar de la forma antigua. Esta forma de trabajar redux está deprecada.

Reducer: Es una función pura que toma dos argumentos
- Estado: contiene el estado inicial de la aplicación, sobre el estado global
- Analiza el tipo de acción mediante un switch statement y ejecuta la función correspondiente
Es una función que tiene un switch que va a estar escuchando a nuestro payload.
Recibe el estado previo y el action

Store: 
- Es un objeto centralizado que almacena el estado global de la aplicación
- Se encarga de ejecutar el reducer para modificar el estado y notificar a los componentes sobre los cambios

ESTRUCTURA DEL STORE
const redux = require("redux");
const reducer = require("./reducers");
const store = redux.createStore(reducer);

module.exports = store;

REDUX TOOLKIT
- Es una librería oficial de Redux
- Creada para incorporar la lógica de Redux Core de una manera simple y eficiente
- Cuenta con métodos y configuraciones quenos ayudan a simplificar el manejo de las estructuras básicas de Redux

INSTALACIÓN
npm install @reduxjs/toolkit
- @reduxjs/toolkit, para instalar los paquetes correspondientes a Redux toolkit
- react-redux, para integrar React con Redux

CONFIGUACIÓN
ConfigureStore
- Crea una carpeta denominada redux dentro de sincronización
- Crea un archivo llamado store.js
-Utilizar el método configureStore de Redux toolkit

createSlice
- Toolkit toma el reducers como funciones independientes
- Estos reducers son creados mediante la función createSlice
- Es una colección de fragmentos de lógica de Redux correspondiente a las actions y el reducer
- Cada una de estas porciones se encarga de manejar una sola pieza del estado.
Create Slice requiere un objeto con tres propiedades:
- Name: nombre en string para identificar el slice creados
- initialState: el estado inicial
- Objeto reducers: con una o más funciones reducer que definirán como actualizar el estado

REACT-REDUX
Component Provider
Provee a todos sus componentes hijos con la información y funcionalidades de la store que recibe como atributo

INSTALACIÓN
npm install React-Redux

Plugin: Redux Devtools
        React Developer Tools

Para utilizar Redux Devtools hacer lo siguiente
npm install redux-devtools-extension --legacy-peer-deps
import { composeWithDevTools } from 'redux-devtools-extension';

const store = configureStore({
  reducer: {
    carrito: carritoSlice,
  },
  devTools: composeWithDevTools(), // Habilitar Redux DevTools
});

HOOKS DE READUX
useSelector
Recibe una función callback que "selecciona" a qué propiedad del estado global deseamos suscribirnos

useDispatch
Toma como argumento la acción que deseamos despachar al reducer

La conexión al back se hace en Carrito en nuestro ejemplo, la llamada no se hace en el s