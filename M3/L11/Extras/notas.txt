REACT ROUTES
Esta parte se trabaja en el archivo main.jsx
React Router DOM: permite trabajar con rutas de manera facil
ReactDom.createRoot(document.getElementById("root")).render()
Envuelve a todo el contenido de app menos los imports
BrowserRouter: permite trabajar con rutas de manera facil
Envuelve a App

Estructura del archivo main.jsx
Aquí van los imports
ReactDOM.createRoot(document.getElementById("root")).render(
  <StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </StrictMode>
);

Path = URL

Routes es el contenedor de las rutas
Route es cada una de las vistas de la app
ROUTE
requiere dos parámetros un path = URL y un element = componente
Estructrura de APP con las rutas
import { useState, useEffect } from "react";

import { Route, Routes } from "react-router-dom";
import HomePage from "./views/HomePage";
import Navbar from "./components/NavBar";
import LoginPage from "./views/LoginPage";
import AboutPage from "./views/AboutPage";
import "./App.css";

function App() {
  const [contacts, setContacts] = useState([]);

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/users")
      .then((response) => response.json())
      .then((data) => setContacts(data));
  });

  return (
    <div className="App">
      <Navbar />{" "}
      {/* por estar afuera de routes se va a renderizar siempre, en todas las páginas o vistas */}
      <Routes>
        <Route path="/" element={<LoginPage />} />
        <Route path="/home" element={<HomePage contacts={contacts} />} />
        <Route path="/about" element={<AboutPage />} />
      </Routes>
    </div>
  );
}

React Dom nos brinda el componente Link que reemplaza a los a en la NavBar, la diferencia entre ambos es el atributo se llama to y no href

Estructura de la NavBar
import style from "./styles/NavBar.module.css";
import { Link } from "react-router-dom";

function Navbar() {
  return (
    <div className={style.container}>
      {/* <a href="/home">Home</a>
      <a href="/about">About</a> */}
      <Link to="/home">Home</Link>
      <Link to="/about">About</Link>
    </div>
  );
}

RUTAS DINÁMICAS - PARÁMETROS
Usamos el hook useParams para acceder a los parámetros de la ruta

REDIRECCIÓN DE EVENTOS
Para esto usaremos dos hooks nuevo
useNavigate para redireccionar, para usarlo sólo debo ejecutarlo, lo que hacer es retornar una función que pasa  una ruta que es donde queremos que nos redirija

useLocation para obtener la información de la ruta actual, se usa igual que useNavigate, pero con un parámetro que es el objeto location, donde se encuentra la información de la ruta actual

REACT ROUTING - Ariel
ROUTING
- Es la gestión de diferentes vistas de una página web
- Permite al usurio moverse entre las distintas páginas de un sitio sin la necesidad de recargar la página por completo
- Los elementos serán denderizados en cada ruta de la SPA
SPA: Single Page Appliction. 
Antes en el diseño web se usaba el modelo en el que se hacía una petición al back y se mostraba la página recargandola toda cada vez que se presionaba un link a una página distintas
Hoy en día el navegador hace la petición y carga todos los archivos sólo la primera vez, trayendo todas las vistas, ahora con single page application, se fija lo que necesita actualizar y trae sólo eso, dejando el resto de la página como está sin tener que recargar todo de nuevo, sino únicamente lo que se necesita modificar, lo que es un modelo mucho más eficiente

REACT-ROUTER-DOM
- Es una librería de React-
- Se enfoca en el manejo de rutas para aplicaciones del lado del cliente
-Esta herramiena gestiona el proceso de denderizado de una SPA, a partir d elas rutas definidas para los difeenes componentes de nuestar aplicación

INSTALACIÓN
Comando de INSTALACIÓNnpm install react-router-dom
Esto nos permite tener acceso alas funcionalidades de React Router Dom enla ultima versión estable

CONFIGURACIÓN
Componente de CONFIGURACIÓNB
BrowserRouter
Este es el componente de react-router-dom que nos proveerá delas distintas funcionalidades para habilitar el enrutamiento en nuesta SPAEste debe ubicarse en el nivel más alto de nuestra aplicación

INSTALACIÓN
npm install react-router-dom

ESTRUCTURA 
En main.jsx colocamos <BrowserRouter><App /></BrowserRouter>

- DEFINE LAS REGLAS DE ENRUTAMIENTO
  En App colocamos
  ROUTES: engloba el conjutno de todos los componentes que se renderizzan en alguna ruta en particular
  ROUTE: representa la ruta específica para cada componente de manera individual.
  - ATRIBUTOS DE ROUTE
    PATH: contien el segmento de URL que dará acceso al compnente en caso de conicidir con la ruta
    ELEMENT: indica el componente a renderizar dentro de la ruta
    <Routes>
      <Route path="/" element={<Landing />} />
    </Routes>
  LINK; permite navegar entre diferentes rutas, sin editar la URL por nuestra cuenta 
  Se puede envolver cualquier tipo de elemento HTML y va a dirigir al usuario a donde queramos
  <Link to="/home">
    <span>Personajes</span>
  </Link>
  Si usamos una etiqueta a la página se recarga por completo porque funciona como una multiple page application
  <NavLink></NavLink> es similar a Link pero tiene un atributo active que permite cambiar el estilo de la etiqueta cuando se encuentra en la ruta, es decir dar formato al botón que esté activo. Recibe un objeto con una propiedad llamada isActive
  <NavLink
    className={({ isActive }) => (isActive ? styles.active : null)}
    to="/home">
    <span>Personajes</span>
  </NavLink>

  RUTAS DINÁMICAS
  Permiten configurar las direcciones web de manera que puedan incluir segmentos variables
  Esot conlleva a que una misma ruta maneje diferentes valores en ciertas partes de la URL
  Posibilita la creación de componentes reutilizables
  Facilita la construcción de aplicaciones más dinámicas y adaptables
  <Route path="/detail/:id" element={<Detail />} />

  Pasos
  1. En App.jsx creamos la ruta al id
     <Route path="/detail/:id" element={<Detail />} />
     Los dos puntos indican que es dinámico
  2. En Card.jsx creamos el link
     <Link to={`/detail/${character.id}`}>
  
Hook useParams
Es parte del React-Router-Dom, lo traigo de una librería, se ejecuta dentro de uno de los componentes.
- Permite obtener y acceder a los parámetroe de una ruta dinámica
- Nos devuelve un objeto con los parámetros de la URL actual
Se fija en la ruta como se llama el parámetro.
params trae un objeto completo con todos los parámetros
const params = useParams();
Toma los valores de la URL y los trae al objeto de parámetros

  3. En Detail.jsx creamos el hook
  import { useParams } from "react-router-dom";
  function Detail() {
    const params = useParams();
  }

LIMPIANDO EL ESTADO AL SALIR DEL COMPONENTE 
Esto permite que al solicitar otro personaje o elemento, no se vean por un milisegundo los datos del personaje anterior o del elemento anterior
  useEffect(() => {
    return () => {
      setCharacter({});
    };
  }, []);

Buena práctia es agregar el ternario al carga un dato

REDIRECCIONAMIENTO DE EVENTOS
Hook useNavigate
Se utiliza para navegar entre diferentes vistas o componentes de una aplicación en respuesa aeventos que ocurren  
Nos permite redirigir al usuario a una ruta como resutaado de una acción
Ejemplo:
const navigate = useNavigate();
navigate("/home");
Se puede agregar al final de un handledSubmit

Hook useLocation
Nos permite acceder aun objeto con información de la ubicación actual según la ruta, incluyendo la URL y sus parámetros
Si quiero obtener la dirección completa de donde está el usuario
pathname: me muestra el URL del lugar donde está el usuario dentro del sitio
Permite mostrar componentes en lugares específicos usando un renderizado condicional
Estos dos se aplican en App.jsx

MANEJO DE ERRORES
Componente de ERRORES- Define un nuevo componente dentro de views llamado ErrorPage
- Este componete muestra una cuenta regresiva al montarse
- Usa un estado local llamado countdown (inicializado en 5)
- Se actualiza cada segundo mediante setInterval y se reinicia al montar el componente para sincronizar con setTimout, que llevará al usuario a "/home" después de 5 segundos
- Al desmontarse el componente, reinicia el intervalo para mantener la precisión al volver a ingresar.
En el componente ErrorPage agregar lo siguiente
  const navigate = useNavigate();
  const [countdown, setCountdown] = useState(5);

  useEffect(() => {
    const timeDown = setTimeout(() => {
      if (countdown === 1) navigate("/home");
      setCountdown((countdown) => countdown - 1);
    }, 1000);

    return () => clearTimeout(timeDown);
  }, [countdown]);

  Pasos a Seguir
  1. Instalar la librería React-Router-Dom
  2. Envolver App en <BrowserRouter> en main.jsx
  3. En App envolver la rutas en una etiqueta <Routes>
  4. Crear cada ruta con una etiqueta <Route> y definir el componente a renderizar a través de path
  5. Agregar comodín por si no matchea ninguna ruta <Route path="*" element={<ErrorPage />} />
  6. Traer el path del useLocation 
  7. No ver la navBar en el Landing
  8. En el componente Detail.jsx traer el parámetro id usando useParams
  9. Vacia el componente antes de irnos de él
  10. En navBar usamos el componente <Link> o <NavLink style = {{}}> 


2:37:00 hs clase 11 Routing